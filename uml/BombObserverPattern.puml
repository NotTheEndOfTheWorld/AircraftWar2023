@startuml
'https://plantuml.com/class-diagram

class ObserverPatternDemo{

}
ObserverPatternDemo ..>  BoomItem

BoomItem o-->  BombSubscriber
class BoomItem {
    - subscribers :List<BombSubscriber>
    + BoomItem(int locationX, int locationY, int speedX, int speedY)
    + effect(HeroAircraft heroAircraft):void
    + forward():void
    + subscribe(BombSubscriber subscriber):void
    + notifySubscribers()
}


interface BombSubscriber{
    + bombUpdate():void

}

BombSubscriber <|.. AbstractEnemy


abstract class AbstractEnemy {
    # score:int
    + AbstractEnemy(int locationX, int locationY, int speedX, int speedY)
    + {abstract}getScore():int
    + {abstract}getItem():List<AbstractItem>
    + {abstract}bombUpdate():void
}


class MobEnemy {
    - score:int
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + getScore():int
    + getItem():List<AbstractItem>
    + bombUpdate():void

}
AbstractEnemy <|-- MobEnemy

class EliteEnemy {
    - score:int
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + getScore():int
    + getItem():List<AbstractItem>
    + bombUpdate():void
}

AbstractEnemy <|-- EliteEnemy

class BossEnemy {
    - score:int
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + getScore():int
    + getItem():List<AbstractItem>
    + bombUpdate():void
}

AbstractEnemy <|-- BossEnemy

BombSubscriber <|.. EnemyBullet

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
     + bombUpdate():void
}
@enduml